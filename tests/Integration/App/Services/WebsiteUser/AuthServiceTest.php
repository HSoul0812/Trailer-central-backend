<?php

namespace Tests\Integration\App\Services\WebsiteUser;

use App\Models\WebsiteUser\WebsiteUser;
use App\Repositories\WebsiteUser\WebsiteUserRepository;
use App\Repositories\WebsiteUser\WebsiteUserRepositoryInterface;
use App\Services\WebsiteUser\AuthService;
use Illuminate\Auth\Events\Registered;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\Hash;
use JetBrains\PhpStorm\Pure;
use PHPUnit\Framework\MockObject\MockObject;
use Tests\Common\IntegrationTestCase;
use Tymon\JWTAuth\Validators\TokenValidator;

class AuthServiceTest extends IntegrationTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    #[Pure] private function getConcreteService(): AuthService {
        return new AuthService(new WebsiteUserRepository());
    }

    public function testRegister() {
        Event::fake();
        $attributes = [
            "first_name" => "Ryo",
            "last_name" => "Ryu",
            "address" => "",
            "zipcode" => "",
            "city" => "",
            "state" => "",
            "email" => "test@test.com",
            "phone_number" => "",
            "mobile_number" => "",
            "password" => "12345678"
        ];
        $service = $this->getConcreteService();
        $service->register($attributes);
        $this->assertDatabaseHas('website_users', ['email' => 'test@test.com']);
        Event::assertDispatched(Registered::class);
    }

    public function testAuthenticate() {
        $user = WebsiteUser::factory()->create(['password' => Hash::make('12345678')]);

        $credentials = [
            'email' => $user->email,
            'password' => '12345678'
        ];

        $service = $this->getConcreteService();
        $token = $service->authenticate($credentials);
        $this->assertTrue((new TokenValidator)->isValid($token));
    }
}
